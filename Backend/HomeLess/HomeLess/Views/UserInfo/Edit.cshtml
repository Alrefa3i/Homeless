@model HomeLess.Models.User
@using System.Security.Claims
@{
    ViewData["Title"] = "Edit";
}

<div class="container my-5">
    <h1 class="text-center display-4">Edit Profile</h1>
    <hr class="mb-5" />

    <div class="row justify-content-center">
        @if (User.Identity.IsAuthenticated)
        {
            <div class="text-center mb-5">
                <p class="text-success">ID: @User.FindFirst("UserId")?.Value</p>
                <img src="@User.FindFirst("Image")?.Value" alt="@User.Identity.Name" width="120" class="rounded-circle shadow mb-3" />
                <h3>@User.Identity.Name</h3>
                <p class="text-muted">Email: @User.FindFirst(ClaimTypes.Email)?.Value</p>
            </div>
        }
        <div class="col-lg-6">
            <form asp-action="Edit" id="myForm" method="post" enctype="multipart/form-data" class="bg-white p-5 rounded shadow-sm border" novalidate>
                <div asp-validation-summary="ModelOnly" class="text-danger mb-4"></div>

                <div class="form-group mb-4">
                    <label for="imageFile" class="form-label font-weight-bold">Profile Image</label>
                    <input type="file" id="imageFile" name="imageFile" class="form-control-file" value="@User.FindFirst("Image")?.Value" required/>
                    <span asp-validation-for="Image" class="text-danger"></span>
                </div>

                <div class="form-group mb-4">
                    <label for="Name" class="form-label font-weight-bold">Name</label>
                    <input type="text" id="Name" name="Name" placeholder="Enter Your Name" class="form-control" value="@User.Identity.Name" required>
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="form-group mb-4">
                    <label for="Password" class="form-label font-weight-bold">New Password</label>
                    <input type="password" id="Password" name="Password" class="form-control" required />
                    <span asp-validation-for="Password" class="text-danger"></span>
                </div>

                <div class="form-group mb-4">
                    <label for="ConfirmPassword" class="form-label font-weight-bold">Confirm Password</label>
                    <input type="password" id="ConfirmPassword" name="ConfirmPassword" class="form-control" required />
                </div>

                <div class="form-group mb-4">
                    <label for="email" class="form-label font-weight-bold">Email</label>
                    <input type="email" id="email" name="email" placeholder="Enter Your Email" class="form-control" required>
                    <span asp-validation-for="Email" class="text-danger"></span>
                </div>

                <div class="d-grid">
                    <button type="submit" class="btn btn-primary btn-lg">Save Changes</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    document.getElementById('myForm').addEventListener('submit', function (event) {
        event.preventDefault(); // Prevent the default form submission

        // Create a FormData object from the form
        const formData = new FormData(this);

        // Send data using Fetch API
        fetch('/UserInfo/Edit', {
            method: 'POST',
            body: formData
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Assuming your server responds with JSON
            })
            .then(data => {
                // Handle the successful response
                document.getElementById('responseMessage').textContent = 'Data submitted successfully!';
                console.log(data);
            })
            .catch(error => {
                // Handle errors
                document.getElementById('responseMessage').textContent = 'Error submitting data: ' + error.message;
            });
    });


</script>
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
